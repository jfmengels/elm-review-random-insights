[{"name":"ExtractDocsJson","comment":"\n\n@docs rule\n\n","unions":[],"aliases":[],"values":[{"name":"rule","comment":" Recreate `docs.json` for your project.\n\n**Note:** This is only a proof of concept and not entirely polished or working. Help would be appreciated :)\n\n    config =\n        [ ExtractDocsJson.rule\n        ]\n\nMaybe this is an interesting start for generating documentation for your project.\n\nThe target is to have something like [this](https://package.elm-lang.org/packages/jfmengels/elm-review/latest/docs.json)\nthat can be decoded using [`Elm.Docs.decoder`](https://package.elm-lang.org/packages/elm/project-metadata-utils/latest/Elm-Docs#decoder).\n\n\n## Example output\n\n```json\n[\n  {\n    \"name\": \"Api.Endpoint\",\n    \"comment\": \"MISSING\",\n    \"unions\": [\n      {\n        \"name\": \"Endpoint\",\n        \"comment\": \"{-| Get a URL to the Conduit API.\\n\\nThis is not publicly exposed, because we want to make sure the only way to get one of these URLs is from this module.\\n\\n-}\",\n        \"args\": [],\n        \"cases\": [\n          [\n            \"Endpoint\",\n            [\n              \"String\"\n            ]\n          ]\n        ]\n      }\n    ],\n    \"aliases\": [],\n    \"values\": [\n      {\n        \"name\": \"tags\",\n        \"comment\": \"{-| The endpoint to get tags\\n-}\",\n        \"type\": \"Endpoint\"\n      },\n      {\n        \"name\": \"feed\",\n        \"comment\": \"MISSING\",\n        \"type\": \"List QueryParameter -> Endpoint\"\n      }\n    ],\n    \"binops\": []\n  }\n]\n```\n\n\n## Try it out\n\nYou can try this rule out by running the following command:\n\n```bash\nelm-review --template jfmengels/elm-review-random-insights/preview --report=json --extract | jq -r '.extracts.ExtractDocsJson'\n```\n\n","type":"Review.Rule.Rule"}],"binops":[]},{"name":"FindUntestedModules","comment":"\n\n@docs rule\n\n","unions":[],"aliases":[],"values":[{"name":"rule","comment":" Finds the modules which are not directly imported by a test module.\n\n    config =\n        [ FindUntestedModules.rule\n        ]\n\nThis is a very crude way of attempting to find untested modules. [Code coverage tools](https://github.com/zwilias/elm-coverage)\ndo a better job at this than this rule could, but there may some blind spots that this rule can cover.\n\nFor instance, you might have some complex function being run as part of your tests without explicitly testing the function itself,\nmeaning that a code coverage tool would indicate the function as being tested, whereas in practice it may not be tested properly.\n\nBoth systems have blind spots, and maybe this kind of insight can help you detect which modules deserve more extensive testing.\n\n\n## Example output\n\n```json\n[\n  \"Some.Untested.Module\",\n  \"Another.Module.Which.Could.Use.Testing\"\n]\n```\n\n\n## Try it out\n\nYou can try this rule out by running the following command:\n\n```bash\nelm-review --template jfmengels/elm-review-random-insights/preview --report=json --extract | jq -r '.extracts.FindUntestedModules'\n```\n\n","type":"Review.Rule.Rule"}],"binops":[]},{"name":"ModuleNameToFilePath","comment":"\n\n@docs rule\n\n","unions":[],"aliases":[],"values":[{"name":"rule","comment":" Get a mapping of module name to file path.\n\n    config =\n        [ ModuleNameToFilePath.rule\n        ]\n\nMaybe this is useful for some kind of build task?\n\n\n## Example output\n\n```json\n{\n  \"Api\": \"src/Api.elm\",\n  \"Article\": \"src/Article.elm\",\n  \"Article.Body\": \"src/Article/Body.elm\",\n  \"Asset\": \"src/Asset.elm\",\n  \"Page.Article\": \"src/Page/Article.elm\",\n  \"Page.Article.Editor\": \"src/Page/Article/Editor.elm\",\n  \"Page.Profile\": \"src/Page/Profile.elm\"\n}\n```\n\n\n## Try it out\n\nYou can try this rule out by running the following command:\n\n```bash\nelm-review --template jfmengels/elm-review-random-insights/preview --report=json --extract | jq -r '.extracts.ModuleNameToFilePath'\n```\n\n","type":"Review.Rule.Rule"}],"binops":[]}]